# Assumning this file lives inside /etc/nginx/conf.d and is being parsed
# in the context of the http {} block:
lua_package_path '/etc/nginx/lua/?.lua;;';

# User-Agent<->device type cache shared among Nginx workers
# Not needed if you're OK with queries against memcached for each
# request.  In that case, do not set the 'dict' key below.
lua_shared_dict ua_type 10m;
# Initialize the device detection instance
init_by_lua '
	local memcached = require("memcached")
	local DeviceDetection = require("DeviceDetection")

	-- Global variable
	g_dd = DeviceDetection:new(memcached, {
		dict = "ua_type",       -- (not required but recommended)
		mc_host = "127.0.0.1",  -- (default)
		mc_port = 11211,        -- (default)
		mc_socket = nil,        -- (could be: unix:/run/memcached.sock)
		mc_timeout = 200        -- (connect timeout, default 200ms)
	})
';

server {
	listen 80;
	server_name _;

	# Turn on 'info' to get additional debugging, such as what keys we're
	# trying to lookup against memcached.
	error_log /var/log/nginx/error.log info;

	# Set a request header called X-Device:
	rewrite_by_lua_file '/etc/nginx/lua/nginx-device-lookup-rewrite.lua';

	location / {
		# To demonstrate that it works (once data is present in memcached)
		content_by_lua '
			ngx.say("nginx or memcached lookup of User-Agent string: ",
				ngx.vars.http_x_device)
		';
	}
}
